#ifndef NODE_H
#define NODE_H
#include "Matrix.h"

class Node {
	public:
	/**Node
	 *
	 * @param index, the index for this node in the nodeList_
	 * @param id, the node identifier
	 * @param name, the name of the node
	 *
	 * @return a Node object
	 *
 	 * Constructs a node with the given index, id and name. All matrices
     * are initialised with an empty matrix.
	 */
	Node(unsigned int index,unsigned int id, const std::string& name);
	
	/**getProbability
	 *
	 * @param nv, value of the node in the internal integer representation
	 * @param pv, values of the parents in the internal integer representation
	 *
	 * @return float, probability that matches the given values
	 *
 	 * Retrieves the desired probability out of the probability matrix
	 */
	float getProbability(unsigned int nv, unsigned int pv) const;
	
	/**getProbability
	 *
	 * @param nv, original value representation of the node
	 * @param pv, original values representation of the parents
	 *
	 * @return float, probability that matches the given values
	 *
 	 * Retrieves the desired probability out of the probability matrix
	 */
	float getProbability(const std::string& nv, const std::string& pv) const;	
	
	/**setProbability
	 *
	 * @param value, probability to be entered into the matrix
	 * @param nv, value of the parents in the internal integer representation
	 * @param pv, values of the parents in the internal integer representation
	 *
 	 * Sets the given value in the Probability matrix of this node
	 */
	void setProbability(float value, unsigned int nv, unsigned int pv);
	
	/**setProbability
	 *
	 * @param value, probability to be entered into the matrix
	 * @param nv, original value representation of the node
	 * @param pv, original values representation of the parents
	 *
 	 * Sets the given value in the Probability matrix of this node
	 */
	void setProbability(float value, const std::string& nv, const std::string& pv);
	
	/**getObservations
	 *
	 * @param nv, node value in the internal integer representation
	 * @param pv, parent values in the internal integer representation
	 *
	 * @return int, entry of the observations matrix for the given values
	 *
 	 * Returns the number of samples in the data, that fits to the given values
	 */
	unsigned int getObservations(unsigned int nv, unsigned int pv) const ;
	
	/**getObservations
	 *
	 * @param nv, original value representation of the node
	 * @param pv, original values representation of the node
	 *
	 * @return int, entry of the observations matrix for given values
	 *
 	 * Returns the number of samples in the data, that fits to the given values
	 */
	unsigned int getObservations(const std::string& nv, const std::string& pv) const ;	
	
	/**setObservations
	 *
	 * @param value, number to be set in the observation matrix
	 * @param nv, node value in the internal integer representation
	 * @param pv, parent values in the internal integer representation
	 *
 	 * Writes the given value to the specified position in the observation matrix
	 */
	void setObservations(int value, unsigned int nv, unsigned int pv);
	
	/**setObservations
	 *
	 * @param value, 
	 * @param nv, node value in the original representation
	 * @param pv, parent values in the original representation
	 *
 	 * Writes the given value to the specified position in the observation matrix
	 */
	void setObservations(int value, const std::string& nv, const std::string& pv);
	
	/**setProbability
	 *
	 * @param m, Matrix of type float containing probabilties
	 *
 	 * Sets the probabilty matrix in the node object
	 */
	void setProbability(const Matrix<float>& m);	
	
	/**setProbabilityTo1
	 *
	 * @param value, node value in the original representation
	 *
	 * Performs a "Do-Intervention" on the CPT. All entries fitting to the given
	 * value are set to 1.0, all others to 0.0
	 */
	void setProbabilityTo1(const std::string& value);
	
	/**setProbabilityTo1
	 *
	 * @param value, node value in the dense integer representation
	 *
	 * Performs a "Do-Intervention" on the CPT. All entries fitting to the given
	 * value are set to 1.0, all others to 0.0 * 
	 */
	void setProbabilityTo1(int value);
	
	/**createBackupDoIntervention
	 *
 	 * Creates a backup of the CPT, and the parent entries to allow to
	 * reverse do interventions
	 */
	void createBackupDoIntervention();
	
	/**loadBackupDoIntervention
	 *
 	 * Loads the backup generated by createBackupDoIntervention
	 */
	void loadBackupDoIntervention();
	
	/**setObservations
	 *
	 * @param m, Matrix of typ int containing observationcounts
	 *
	 * Sets the entire observation matrix
	 */
	void setObservations(const Matrix<int>& m);
	
	/**setObservationBackup
	 *
	 * @param
	 *
 	 * Generates a backup of the observation matrix
	 */
	void setObservationBackup(const Matrix<int>& m);
	
	/**getName
	 *
	 * @return Name of the node
 	 *
	 */
	const std::string& getName() const;

	/**setName
	 *
	 * @param Name that should be assigned to the node
	 * 
	 */
	void setName(std::string name);

	/**setID
	 *
	 * @param id that should be assigned to the node
	 *
	 */
	void setID(unsigned int id);	

	/**getIndex
	 *
	 * @return Index of the node
	 *
	 */
	const unsigned int& getIndex() const;
	
	/**getID
	 *
	 * @return Identifier of the node
	 *
	 */
	const unsigned int& getID() const;
	
	/**getIndex
	 *
	 * @param value, value in the original string representation
	 *
	 * @return index of this value in the probability matrix
	 *
 	 * Returns the index of the given value in the CPT
	 */
	int getIndex(const std::string& value) const;
	
	/**hasValue
	 *
	 * @param v, value in the original string representation
	 *
	 * @return bool, true if v is a value of this node, false otherwise
	 *
 	 * Checks whether v is a value of this node
	 */
	bool hasValue(const std::string& v) const;
	
	/**getParents
	 *
	 * @return A vector containing the node identifiers of the parents of the current node
	 *
	 */
	const std::vector<unsigned int>& getParents() const;
	
	/**getNumberOfParents
	 *
	 * @return The number of parents
	 *
	 */
	unsigned int getNumberOfParents() const;
	
	/**setParents
	 *
	 * @param parents, A vector containing the node identfiers of the parents of this node
 	 *
	 * Sets the parents of the node
	 */
	void setParents(const std::vector<unsigned int>& parents);
	
	/**cutParents
	 *
 	 * Deletes the parents of this node
	 */
	void cutParents();
	
	/**setUniqueValues
	 *
	 * @param uniqueValues, a vector containing the unique values of this node
	 *
	 * Sets the uniqueValues of this node
	 */
	void setUniqueValues(const std::vector<int>& uniqueValues);
	
	/**getUniqueValues
	 *
	 * @return A vector containing the unique values of this node
 	 *
	 */
	const std::vector<int>& getUniqueValues() const;
	
	/**setUniqueValuesExcludingNA
	 *
	 * @param uniqueValuesExcludingNA, a vector containing the unique values without NAs
	 *
 	 * Sets the uniqueValuesExcludingNAs
	 */
	void setUniqueValuesExcludingNA(const std::vector<int>&);
	
	/**getUnqiueValuesExcludingNA
	 *
	 * @return A vector containig unique values excluding NAs
	 *
	 */
	std::vector<int>& getUniqueValuesExcludingNA();
	
	/**getUniqueValuesExcludingNA
	 *
	 * @return A vector containig unique values excluding NAs
 	 *
	 */
	const std::vector<int>& getUniqueValuesExcludingNA() const;

	/**getNumberOfParentValues
	 *
	 * @return The number of different value combinatons with respect to the parents
	 *
	 */
	unsigned int getNumberOfParentValues() const;

	/**getNumberOfUnqiueValues
	 *
	 * @return The number of unique values occuring in this node
	 *
	 */
	unsigned int getNumberOfUniqueValues() const;

	/**getNumberOfUnqiueValuesExcludingNA
	 *
	 * @return The number of unique values occuring in this node excluding NAs
	 *
	 */
	unsigned int getNumberOfUniqueValuesExcludingNA() const;

	/**setObservationRow
	 *
	 * @param row, row of the observation matrix belonging to this node
	 *
 	 * Sets the row in the observation matrix that contains all values 
	 * that should be reflected by this node
	 */
	void setObservationRow(int row);
	
	/**getObservationRow
	 *
	 * @return row containing the observations
	 *
	 */
	int getObservationRow() const;
	
	/**setParentCombinations
	 *
	 * @param row, 
	 *
 	 *
	 */
	void setParentCombinations(int row);
	
	/**getParentCombinations
	 *
	 * @return
	 *
	 */
	int getParentCombinations() const;
	
	/**setValueNames
	 *
	 * @param valueNames, vector containing all possible value names
	 * 
 	 * Sets the valueNames
	 */
	void setValueNames(const std::vector<std::string>& valueNames);
	
	/**addValueName
	 *
	 * @param name, a single value name
	 *
 	 * adds a single name to the valueName vector
	 */
	void addValueName(const std::string& name);
	
	/**getValueNames
	 *
	 * @return A reference to the valueNames vector
	 *
	 */
	const std::vector<std::string>& getValueNames() const;
	
	/**setValueNamesProb
	 *
	 * @param valueNames, vector containing the value names
	 *
 	 * Sets the valueNamesProb, the names for the values in the CPT
	 */
	void setValueNamesProb(const std::vector<std::string>& valueNames);

	/**addValueNameProb
	 *
	 * @param name
	 *
 	 * Adds a single name to the valueNamesProb vector
	 */
	void addValueNameProb(const std::string& name);

	/**getValueNamesProb
	 *
	 * @return A reference to the valueNamesProb
	 *
 	 *
	 */
	const std::vector<std::string>& getValueNamesProb() const;
	
	/**setParentValueNames
	 *
	 * @param valueNames, vector containing the parent value names
 	 *
	 * Sets the parentValueNames
	 */
	void setParentValueNames(const std::vector<std::string>& valueNames); 

	/**addParentValueName
	 *
	 * @param name
	 *
 	 * Adds a single name to the parentValueName vector
	 */
	void addParentValueName(const std::string& name);

	/**getParentValueNames
	 *
	 * @return A reference to the parentValueNames vector
 	 *
	 */
	const std::vector<std::string>& getParentValueNames() const;

	/**getProbabilitiyMatrix
	 *
	 * @return A reference to the probability matrix
 	 *
	 */
	Matrix<float>& getProbabilityMatrix();
	
	/**getProbabilitiyMatrix
	 *
	 * @return A const reference to the probability matrix
	 *
	 */
	const Matrix<float>& getProbabilityMatrix() const;

	/**getObservationMatrix
	 *
	 * @return A reference to the observation matrix
	 *
	 */
	Matrix<int>& getObservationMatrix();

	/**getObservationMatrix
	 *
	 * @return A const reference to the observation matrix
	 *
	 */
	const Matrix<int>& getObservationMatrix() const;

	/**isCalculated
	 *
	 * @param index, column in the CPT
	 * @param row, row in the CPT
	 *
	 * @return True, if the Dynamic Programming Matrix contains an entry at the specified position,
	 * False otherwise
	 *
 	 * Checks wheter the value at the specified position is already calculated
	 */
	bool isCalculated(unsigned int index, unsigned int row) const;

	/**setCalculatedValue
	 *
	 * @param value, value to be stored
	 * @param index, column in the CPT
	 * @param row, row in the CPT
	 *
 	 * Sets the given value in the Dynamic Programming Matrix
	 */
	void setCalculatedValue(float value, unsigned int index, unsigned int row);

	/**getCalculatedValue
	 *
	 * @param index, column of the CPT
	 * @param row, row of the CPT
	 *
	 * @return entry of the Dynamic Programming Matrix at the specified position
	 *
	 */
	float getCalculatedValue(unsigned int index, unsigned int row) const;

	/**clearDynProgMatrix
	 *
 	 * Resets the Dynamic Programming Matrix
	 */
	void clearDynProgMatrix();

	/**createBackup
	 *
 	 * Creates a backup of the node
	 */
	void createBackup();

	/**loadBackup
	 *
 	 * Loads a backup of the node
	 */
	void loadBackup();

	/**setUnvisited
	 *
 	 * Marks the node as unvisited
	 */
	void setUnvisited();

	/**visit
	 *
 	 * Marks the node as visited
	 */
	void visit();

	/**isVisited
	 *
 	 * @return True, if the node is marked as visited, false otherwise
	 */
	bool isVisited() const;
	
	/**clearNameVectors
	 *
 	 * Resets all vectors containing names in the node
	 */
	void clearNameVectors();

	/**setParentValues
	 *
 	 * @param pValues, a vector containing vectors representing the integer representation of the 
	 * parents of this node specifcally for every possible combination
	 *
	 * Sets the parentValues
	 */
	void setParentValues(std::vector<std::vector<int>>& pValues);
	
	/**getParentValues
	 *
	 * @return A vector containing vectors of integers representing the values of the parents of this node
	 * for every combination
	 *
	 */
	const std::vector<std::vector<int>>& getParentValues() const;
	
	/**reset
	 *
	 * Resets the node such that all its members are empty
	 */
	void reset();

	/**operator<<
	 *
	 * @param os, Reference to an ostream
	 * @param n, Const reference to a node
 	 *
	 * @return Reference to the ostream
 	 *
	 */
	friend std::ostream& operator<< (std::ostream& os,const Node& n);
	private:
	//Index of the node in the vector nodeList_ of the Network class
	unsigned int index_;
	//Identifier of the node
	unsigned int id_;
	//Vector containig node identifiers of the parents
	std::vector<unsigned int> Parents_;
	std::vector<unsigned int> ParentsBackup_;
	//The name of the Node
	std::string name_;
	//Matrices storing the CPTs for a node, including a backup to restore
	//the original state when interventions are reversed
	Matrix<float> ProbabilityMatrix_;
	Matrix<float> ProbabilityMatrixBackup_;
	//Matrices storing the observation counts
	Matrix<int> ObservationMatrix_;
	Matrix<int> ObservationBackup_;
	//Matrix to store results during dynamic programming to calculat total probabilities
	Matrix<float> DynProgMatrix_;
	//Vector containing the integer representation of all unique values of this node
	std::vector<int> uniqueValues_;
	//Vector containing the names for all possible values (including NAs) of this node
	std::vector<std::string> valueNames_;
	//Vector containing the names for the probability matrix of this node
	std::vector<std::string> valueNamesProb_;
	//Vector containing the original names of the parent values
	std::vector<std::string> parentValueNames_;
	//All possible parent values, including a backup to restore the original
	//state when interventions are reversed
	std::vector<std::vector<int>> parentValues_;
	std::vector<std::vector<int>> parentValuesBackup_;
	//A vector of all unqiue Values excluding NAs
	std::vector<int> uniqueValuesExcludingNA_;
	//The row of the Observations Matrix belonging to this node
	int observationRow_;
	//The number of possible combinations by compining parent values
	int parentCombinations_;
	//Indicates wheter a node is visited during DFS, initialized with false
	bool visited_=false;
};
#endif
